#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('paintinteractive:server');
let http = require('http');


/**
 * Set view engine
app.set('view engine', 'pug');*/

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Sockets
 */
const fs = require('fs');
let socket = require('socket.io');
let io = socket(server);
let userDataObj = {};
let userMap = new Map();
let blobStack = [5, 4, 3, 2, 1, 0];


io.sockets.on('connection', newConnection);

function newConnection(socket) {

  console.log("New connection " + socket.id);
  // add to map
  if(blobStack.length > 0)
    userMap.set(socket.id, blobStack.pop());
  else {
    userMap.set(socket.id, -1); //not long term solution (send client 'server full' msg)
  }
  //Initialize userDataObj structure
  userDataObj[socket.id] = {
    blob: userMap.get(socket.id),
    x: 0.0,
    y: 0.0,
    f: 0.0,
    d: 0.0,
    colourLength: 1,
    colour: {
      0: '#FFF'
    }
  };
  userDataObj[-1] = {
    blob: -1,
    remaining: blobStack
  };

  fs.writeFileSync('test.json', JSON.stringify(userDataObj));

  socket.on('addedPickr', (data) => {
    userDataObj[socket.id].colourLength = data[0];
    userDataObj[socket.id].colour[data[0]-1] = data[1];
    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });

  socket.on('changedColour', (data) => {
    userDataObj[socket.id].colourLength = data[2];
    userDataObj[socket.id].colour[data[0]] = data[1];
    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });

  socket.on('removedPickr', (data) => {
    userDataObj[socket.id].colourLength = data;
    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });

  socket.on('end', (data) => {
    userDataObj[socket.id].x = 0;
    userDataObj[socket.id].y = 0;

    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });

  socket.on('move', (data) => {
    //set userDataObj with the key's data
    userDataObj[socket.id].x = data.instance.frontPosition.x;
    userDataObj[socket.id].y = data.instance.frontPosition.y;
    userDataObj[socket.id].f = data.force;
    userDataObj[socket.id].d = data.distance;

    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });

  socket.on('pressure', pressureData);

  socket.on('disconnecting', (reason) => {
    console.log("User " + socket.id + " disconnecting: " + reason);

    //not long-term solution
    if (userMap.get(socket.id) !== -1) {
      blobStack.push(userMap.get(socket.id));
    }

    userMap.delete(socket.id);

    userDataObj[-1].remaining = blobStack;
    delete userDataObj[socket.id];
  });
  socket.on('disconnect', (reason) => {
    console.log("User " + socket.id + " disconnected: " + reason);
    fs.writeFileSync('test.json', JSON.stringify(userDataObj));
  });
}


function pressureData(data) {
  console.log(data);
}